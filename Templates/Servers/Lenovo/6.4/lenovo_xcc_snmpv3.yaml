zabbix_export:
  version: '6.4'
  template_groups:
    - uuid: 0835b2a34e4a43d6887f5887b0135acc
      name: 'Templates/Servers Hardware'
  templates:
    - uuid: f8fa9971926b44faa40e23ea49166fb8
      template: lenovo_xcc_snmpv3
      name: lenovo_xcc_snmpv3_test
      description: |
        # Written by Rayg00nchik
        Template for monitoring Lenovo Servers (especially for SR630 V2)
      groups:
        - name: 'Templates/Servers Hardware'
      items:
        - uuid: 179b426cde59401f85fd33b18d5acf1e
          name: 'Active BMC Version'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.1.5.1.1.3.1
          key: snmp.lenovo.server.activebmc.version
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'Active BMC Version in use'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Firmware
        - uuid: 459346356a9247259a53e13771477665
          name: 'Backup BMC Version'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.1.5.1.1.3.3
          key: snmp.lenovo.server.bmcbackup.version
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'Backup version of BMC - not in use'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Firmware
        - uuid: 3ef8808668dc4a7c988ee58b6bc133ca
          name: 'System Power Status'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.5.1.1.0
          key: snmp.lenovo.server.currentsyspowerstatus
          history: 14d
          trends: '0'
          description: |
            Indicates if the system is currently powered on, off, or in sleep state:
            0 -> PoweredOff
            1 -> sleepS3
            255 -> Normal (Online)
          valuemap:
            name: 'System Power Status'
          tags:
            - tag: Application
              value: Status
        - uuid: 9f83666e4a0040f1ab5923559ec5b2e1
          name: 'System Hostname'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.3.4.1.11.0
          key: snmp.lenovo.server.hostname
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'DNS host name for this system. This object provides the exact same function as   ethernetInterfaceHostName.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Information
          triggers:
            - uuid: 676f166936e54ebd8f8a9938651fdd73
              expression: 'last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.hostname,#1)<>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.hostname,#2) and length(last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.hostname))>0'
              name: 'System hostname has changed'
              priority: INFO
              description: |
                System hostname has changed. 
                Acknowledge to close.
              manual_close: 'YES'
        - uuid: db508722f4d84030af28cbded609bb29
          name: 'Location: Rack ID - Unit Position'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.3.3.4.0
          key: snmp.lenovo.server.location.rack.unit.position
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'Location - Rack Unit Position'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Information
        - uuid: e12100e84b384552a1d5715d0f501228
          name: 'Location: Rack ID'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.3.3.3.0
          key: snmp.lenovo.server.location.rackid
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'Location - Rack'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Information
        - uuid: a9b7a234f17a40fab3e28a6edab64e03
          name: 'Location: Room ID'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.3.3.2.0
          key: snmp.lenovo.server.location.roomid
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'Location - Room'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Information
        - uuid: 775df771401d43b8857261c53d938594
          name: 'Location: System'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.3.4.2.1.3.0
          key: snmp.lenovo.server.location.system
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'System Location'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Information
        - uuid: 608e8dbdd38e4d6ca6d7fed7f26566b8
          name: 'LXPM Version'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.1.5.1.1.3.5
          key: snmp.lenovo.server.lxpm
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'System Firmware - LXPM Version'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Firmware
        - uuid: 4cbb861bd42440cf8681a5e9bd68d818
          name: 'PSU: Total Power in use'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.1.10.1.10.0
          key: snmp.lenovo.server.power.inuse
          history: 14d
          units: W
          description: 'This field displays total power in use value.'
          tags:
            - tag: Application
              value: 'Power Supply Information'
        - uuid: 03e36569d6c146e7ab6f3eccddd52c7e
          name: 'PowerOn Hours'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.5.1.2.0
          key: snmp.lenovo.server.poweronhours
          delay: 30m
          history: 14d
          trends: '0'
          description: 'Number of hours the system has been powered on.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Status
        - uuid: fa2b772d4f894e89850d652a1c4a9ad6
          name: 'System Product Name'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.1.5.2.1.5.0
          key: snmp.lenovo.server.product.name
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'Machine Product Name (e.g. System x3650 M2)'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Information
        - uuid: f9ed6cb43dd140c4a91beab4bcab1124
          name: 'Restart Count'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.5.1.3.0
          key: snmp.lenovo.server.restartcount
          delay: 30m
          history: 14d
          trends: '0'
          description: 'Number of times the system has been restarted.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Status
        - uuid: ef335733e03a448281cd6ad27480bde2
          name: 'System Serial Number'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.1.5.2.1.3.0
          key: snmp.lenovo.server.serial.number
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'Machine serial number VPD information.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Information
          triggers:
            - uuid: 7b9381e2609747a4a47ac19f6d15b42e
              expression: 'last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.serial.number,#1)<>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.serial.number,#2) and length(last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.serial.number))>0'
              name: 'Device has been replaced'
              priority: INFO
              description: |
                Device serial number has changed.
                Acknowledge to close.
              manual_close: 'YES'
        - uuid: e26d165ef6e34470b6884ead7b815037
          name: 'Service: HTTPS Web Status'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.3.4.2.4.6.1.0
          key: snmp.lenovo.server.service.https.web..status
          history: 14d
          trends: '0'
          description: |
            Get the status for web HTTPS service. 
            To use SSL, a client web browser must be configured to use SSL3 and/or TLS. Older export-grade browsers with only SSL2 support cannot be used.
          valuemap:
            name: 'Services Status'
          tags:
            - tag: Application
              value: 'Service Status'
          triggers:
            - uuid: c520c9573a1242398a5a25beb963162a
              expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.service.https.web..status,#3,"ne",1)=1'
              name: 'Web Service is Disabled'
              priority: HIGH
              description: |
                Web Service is disabled
                Check the host please.
        - uuid: 22f1aa2c1ac24ef8aab411531edd11f3
          name: 'Service: IPMI Status'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.3.4.2.10.1.0
          key: snmp.lenovo.server.service.ipmi..status
          history: 14d
          trends: '0'
          description: 'Get the status of IPMI service'
          valuemap:
            name: 'Services Status'
          tags:
            - tag: Application
              value: 'Service Status'
        - uuid: 7b89c0b0d0ae421c809069d03082db06
          name: 'Service: SSH Status'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.3.4.2.4.5.5.0
          key: snmp.lenovo.server.service.ssh.status
          history: 14d
          trends: '0'
          description: 'Get SSH service status'
          valuemap:
            name: 'Services Status'
          tags:
            - tag: Application
              value: 'Service Status'
        - uuid: cc3b0c63457d4022b3b5f56b46e2262b
          name: 'System Health Status'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.5.1.4.0
          key: snmp.lenovo.server.systemstate
          history: 14d
          trends: '0'
          description: |
            Shows the current operational state of the system:
            0 -> systemPowerOfforStateUnknown
            1 -> systemPowerOnorStartingUEFI
            2 -> systemInUEFI
            3 -> uEFIErrorDetected
            4 -> bootingOSorInUnsupportedOS
            5 -> oSBooted
            6 -> suspendToRAM
            7 -> systemInSetup
            8 -> systemInLXPMMaintenanceMode
            9 -> systemInMemoryTest
          valuemap:
            name: 'Operational State of the System'
          tags:
            - tag: Application
              value: Status
          triggers:
            - uuid: 821bc070bd4e49b79b76a13ca9ff2594
              expression: 'nodata(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.systemstate,{$SNMP.NO.DATA.INTERVAL})=1'
              name: 'No SNMP data for the last {$SNMP.NO.DATA.INTERVAL} minutes'
              priority: HIGH
              description: |
                No SNMP data more than 5 minutes.
                Check the host please.
            - uuid: 39d16cfbd1c94100b361cd01608b4579
              expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.systemstate,#3,"eq",1)=0 and count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.systemstate,#3,"eq",2)=0 and count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.systemstate,#3,"eq",4)=0 and count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.systemstate,#3,"eq",5)=0 and count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.systemstate,#3,"eq",6)=0 and count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.systemstate,#3,"eq",7)=0 and  count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.systemstate,#3,"eq",9)=0'
              name: 'System status is in critical state'
              priority: HIGH
              description: 'Check the host state please.'
        - uuid: bf1dde80ebae441c912269f3564a87c0
          name: 'UEFI Version'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.1.5.1.1.3.4
          key: snmp.lenovo.server.uefi.version
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'Get the UEFI version'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Firmware
        - uuid: 7d0b45d6739e4d72acd9ef7fbe1f22b4
          name: 'XCC Version type'
          type: SNMP_AGENT
          snmp_oid: .1.3.6.1.4.1.19046.11.1.3.7.0
          key: snmp.lenovo.server.xcc.version.type
          delay: 30m
          history: 14d
          trends: '0'
          value_type: TEXT
          description: 'Get the XCC version type.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          tags:
            - tag: Application
              value: Firmware
      discovery_rules:
        - uuid: 1432fbc1dbc645488588516da98330f3
          name: 'CPU Discovery'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#CPUDESCR}, .1.3.6.1.4.1.19046.11.1.1.5.20.1.2]'
          key: snmp.lenovo.server.cpu.discovery
          delay: 1h
          description: 'Discovering CPU'
          item_prototypes:
            - uuid: e8a5efb7a13842f58c83cf032adbe23f
              name: '{#CPUDESCR}: Model'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.5.20.1.12.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.cpu.model.[cpuVpdCpuModel.{#SNMPINDEX}]'
              delay: 30m
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'System cpu model.'
              preprocessing:
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              tags:
                - tag: Application
                  value: CPU
            - uuid: 26d38cc7ba5049a1992e39f19dac5fb9
              name: '{#CPUDESCR}: Part ID'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.5.20.1.4.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.cpu.partid[cpuVpdIdentifier.{#SNMPINDEX}]'
              delay: 30m
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'System CPU Identifier.'
              preprocessing:
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              tags:
                - tag: Application
                  value: CPU
            - uuid: bcb692be88ed4b928d00107e82c20d20
              name: '{#CPUDESCR}: Total Cores'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.5.20.1.7.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.cpu.totalcores.[cpuVpdCores.{#SNMPINDEX}]'
              delay: 30m
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'System cpu number of cores.'
              preprocessing:
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              tags:
                - tag: Application
                  value: CPU
        - uuid: 988ef2404a4c455581611c8170b8011b
          name: 'FAN Discovery'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#FANDESCR},.1.3.6.1.4.1.19046.11.1.1.3.2.1.2]'
          key: snmp.lenovo.server.fan.discovery
          delay: 1h
          description: 'Discovering fans from LENOVO-XCC-MIB::fanDescr'
          item_prototypes:
            - uuid: 83d031d1f4c4476d87430bb8fa8d04b7
              name: '{#FANDESCR}: Low Critical Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.3.2.1.8.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.fan.low.critical.limit[fanCritLimitLow.{#SNMPINDEX}]'
              delay: 10m
              history: 30d
              trends: '0'
              description: 'The low critical limit for the measured fan. If the measured value falls below this limit a trap is sent'
              preprocessing:
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              tags:
                - tag: Application
                  value: Fans
            - uuid: ccb5605b26df4635b81d46fd24c8330d
              name: '{#FANDESCR}: Speed, % of maximum'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.3.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.fan.speed.percentage[fanSpeed.{#SNMPINDEX}]'
              history: 7d
              units: '%'
              description: 'Fan  speed expressed in percent(%) of maximum RPM. An octet string expressed as ''ddd% of maximum'' where: d is a decimal digit or blank space for a leading zero. If the fan is determined not to be running or the fan speed cannot be determined, the string will indicate ''Offline''.'
              preprocessing:
                - type: REGEX
                  parameters:
                    - \d.
                    - \0
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              tags:
                - tag: Application
                  value: Fans
              trigger_prototypes:
                - uuid: 2b44dbdd669545288c7f8c96ce0e214c
                  expression: 'min(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.fan.speed.percentage[fanSpeed.{#SNMPINDEX}],#4)>{$FAN.HIGH.SPEED}'
                  name: '{#FANDESCR}: Speed > {$FAN.HIGH.SPEED}% of maximum for the last 20 min'
                  priority: AVERAGE
                  description: |
                    Very high speed of fan.
                    More than {$FAN.HIGH.SPEED} % of maximum
                    Check the the temperature please!
                - uuid: 8b8f233c1fc843eb9b77fcf23de009d0
                  expression: 'min(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.fan.speed.percentage[fanSpeed.{#SNMPINDEX}],#4)>{$FAN.MEDIUM.SPEED}'
                  name: '{#FANDESCR}: Speed > {$FAN.MEDIUM.SPEED}% of maximum for the last 20 min'
                  priority: WARNING
                  description: |
                    Very high speed of fan.
                    More than {$FAN.MEDIUM.SPEED} % of maximum
                    Check the the temperature please!
                  dependencies:
                    - name: '{#FANDESCR}: Speed > {$FAN.HIGH.SPEED}% of maximum for the last 20 min'
                      expression: 'min(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.fan.speed.percentage[fanSpeed.{#SNMPINDEX}],#4)>{$FAN.HIGH.SPEED}'
            - uuid: d5b11c0d180649daa22aa8273ca216da
              name: '{#FANDESCR}: Status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.3.2.1.10.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.fan.status[fanHealthStatus.{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the fan component status.'
              tags:
                - tag: Application
                  value: Fans
              trigger_prototypes:
                - uuid: 974a5fb631c04196a7cee91e40407395
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.fan.status[fanHealthStatus.{#SNMPINDEX}],#3,"ne","{$FAN.NORMAL.STATUS}")=1'
                  name: '{#FANDESCR}: is not in optimal state'
                  priority: HIGH
                  description: |
                    Fan unit  is not in optimal state
                    Check the fan please!
        - uuid: 725278db3c674dc283d4dd3b7e4ea1b4
          name: 'Physical Disk Discovery'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#DISK},.1.3.6.1.4.1.19046.11.1.1.12.2.1.2]'
          key: snmp.lenovo.server.physicaldisk.discovery
          delay: 1h
          description: 'LENOVO-XCC-MIB:diskIndex'
          item_prototypes:
            - uuid: 9e2438a1ab7d401aa973daf2a370abfb
              name: '{#DISK}: Physical disk part number'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.12.2.1.2.{#SNMPINDEX}'
              key: 'snmp.lenovo.server..physicaldisk.partnumber[diskFruName.{#SNMPINDEX}]'
              delay: 1h
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'Disk module FRU name.'
              preprocessing:
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              tags:
                - tag: Application
                  value: 'Physical Disks Information'
            - uuid: f8f4ee8108f048c0baad7ce4e9186165
              name: '{#DISK}: Physical disk status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.12.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.physicaldisk.status[diskHealthStatus.{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the disk module status'
              tags:
                - tag: Application
                  value: 'Physical Disks Status'
              trigger_prototypes:
                - uuid: 12831bf0ae4340d08ca9e7c3e2bbcdc8
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.physicaldisk.status[diskHealthStatus.{#SNMPINDEX}],#3,"ne","{$DISK.NORMAL.STATUS}")=1'
                  name: '{#DISK}: Physical Disk is not in optimal state'
                  priority: HIGH
                  description: |
                    Physical Disk is not in optimal state
                    Check the disk for errors.
        - uuid: 9d828f15c0774548a0637298e59002fa
          name: 'PSU Discovery'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#POWER_FRU_NAME},.1.3.6.1.4.1.19046.11.1.1.11.2.1.2]'
          key: snmp.lenovo.server.psu.discovery
          delay: 1h
          description: 'LENOVO-XCC-MIB::powerFruName'
          item_prototypes:
            - uuid: 9fa03901d2b648719a1f54d840c33242
              name: '{#POWER_FRU_NAME}: Fru Number'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.11.2.1.4.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.power.fru.number[powerFRUNumber.{#SNMPINDEX}]'
              delay: 1h
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'Power module FRU Number.'
              tags:
                - tag: Application
                  value: 'Power Supply Information'
            - uuid: a2b38426f49e4e37bfffb727f6daf9be
              name: '{#POWER_FRU_NAME}: Fru Serial Number'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.11.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.power.fru.serial.number[powerFRUSerialNumber.{#SNMPINDEX}]'
              delay: 1h
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'Power module Serial Number'
              tags:
                - tag: Application
                  value: 'Power Supply Information'
            - uuid: a086c3b99d2745ba8581afe3b879c6fd
              name: '{#POWER_FRU_NAME}: Power Supply Status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.11.2.1.6.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.power.health.status[powerHealthStatus.{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the power module status.'
              tags:
                - tag: Application
                  value: 'Power Supply Status'
              trigger_prototypes:
                - uuid: 51c5cbac79404d2a858ecd5e9a9fd0ca
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.power.health.status[powerHealthStatus.{#SNMPINDEX}],#3,"ne","{$PSU.NORMAL.STATUS}")=1'
                  name: '{#POWER_FRU_NAME}: Power Supply is not in normal state'
                  priority: HIGH
                  description: 'Please check the power supply unit for errors'
            - uuid: c2e4cd13403c49ac943120f05ccfbabf
              name: '{#POWER_FRU_NAME}: Part Number'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.11.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.power.part.number[powerPartNumber.{#SNMPINDEX}]'
              delay: 1h
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'Power module Part Number.'
              tags:
                - tag: Application
                  value: 'Power Supply Information'
        - uuid: 1ad9a1fa17554dd3957a4ae4c42778bb
          name: 'Temperature Discovery - Ambient'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#AMBIENT_SENSOR},1.3.6.1.4.1.19046.11.1.1.1.2.1.2]'
          key: snmp.lenovo.server.temp.ambient.discovery
          delay: 1h
          filter:
            conditions:
              - macro: '{#AMBIENT_SENSOR}'
                value: 'Ambient.*'
                formulaid: A
          description: 'Ambient temperature discovery'
          item_prototypes:
            - uuid: 76617fa7045e4256b5e6356ed1b72caf
              name: '{#AMBIENT_SENSOR}:  Critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.6.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ambient.[tempCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.HIGH.LIMIT.AMBIENT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: a679597c273b410f8bfc28974aa5f677
              name: '{#AMBIENT_SENSOR}:  Critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.9.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ambient.[tempCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The critical limit for the measured temperature. If the measured value falls below  this limit a trap is sent.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.LOW.LIMIT.AMBIENT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: db12621838af4ca99d7e091d503ea987
              name: '{#AMBIENT_SENSOR}: Sensor Status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.11.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ambient.[tempHealthStatus.{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the temperature component status.'
              tags:
                - tag: Application
                  value: 'Temperature Sensor Status'
              trigger_prototypes:
                - uuid: b72b469b74254dc08635f830f7bb5d36
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
                  name: '{#AMBIENT_SENSOR}: Temperature Sensor is not in optimal state'
                  priority: HIGH
                  description: 'Sensor problem'
                  dependencies:
                    - name: '{#AMBIENT_SENSOR}: Temperature is above Disaster threshold'
                      expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                      recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
            - uuid: 2860256d687f42b3a4a1d75dfa8ac836
              name: '{#AMBIENT_SENSOR}:  Nominal Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.4.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ambient.[tempNominalReading.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The nominal temperature, if available.'
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - ''
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 52ef4068f2664e488eef9cd17c00f015
              name: '{#AMBIENT_SENSOR}:  Non-critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.7.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ambient.[tempNonCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.HIGH.LIMIT.AMBIENT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 9c3d2c900dfc499ca08eac9b9ba0439e
              name: '{#AMBIENT_SENSOR}:  Non-critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.10.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ambient.[tempNonCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value falls below  this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.LOW.LIMIT.AMBIENT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: e4487deaa56941fd8b6412cbdd39615c
              name: '{#AMBIENT_SENSOR}:  Non-recoverable High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.5.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ambient.[tempNonRecovLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.HIGH.LIMIT.AMBIENT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 49d335e7af9740e39af1e934a3004ef1
              name: '{#AMBIENT_SENSOR}:  Non-recoverable Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.8.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ambient.[tempNonRecovLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value falls below this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.LOW.LIMIT.AMBIENT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 2c45cfcb312843a18f147e706b3096e8
              name: '{#AMBIENT_SENSOR}: Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.19046.11.1.1.1.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}]'
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The measured temperature Ambient'
              tags:
                - tag: Application
                  value: Temperature
          trigger_prototypes:
            - uuid: 2de636a6a0824e818ea5ea9eca8011ac
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              name: '{#AMBIENT_SENSOR}: Temperature is above Average threshold'
              priority: AVERAGE
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#AMBIENT_SENSOR}: Temperature is above Critical threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempCritLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempCritLimitLow.{#SNMPINDEX}]))'
            - uuid: 1c80c72c8ebc484381758ce2108c6892
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempCritLimitLow.{#SNMPINDEX}]))'
              name: '{#AMBIENT_SENSOR}: Temperature is above Critical threshold'
              priority: HIGH
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#AMBIENT_SENSOR}: Temperature is above Disaster threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                - name: '{#AMBIENT_SENSOR}: Temperature Sensor is not in optimal state'
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
            - uuid: 17918efc46634c31b998bdf150f376f8
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ambient.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              name: '{#AMBIENT_SENSOR}: Temperature is above Disaster threshold'
              priority: DISASTER
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
        - uuid: 0af7ba67fbf649f19644c5455c9cd904
          name: 'Temperature Discovery - CPU'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#CPU_SENSOR},1.3.6.1.4.1.19046.11.1.1.1.2.1.2]'
          key: snmp.lenovo.server.temp.cpu.discovery
          delay: 1h
          filter:
            conditions:
              - macro: '{#CPU_SENSOR}'
                value: 'CPU [0-9]* Temp'
                formulaid: A
          description: 'CPU temperature discovery'
          item_prototypes:
            - uuid: 3248c10b082b4177ba24743a7e693cbb
              name: '{#CPU_SENSOR}: Critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.6.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.cpu.[tempCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.HIGH.LIMIT.CPU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 10a9fd7efda244cda15eb8197b06d961
              name: '{#CPU_SENSOR}: Critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.9.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.cpu.[tempCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The critical limit for the measured temperature. If the measured value falls below  this limit a trap is sent.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.LOW.LIMIT.CPU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: c46f4cacc77448f3b82cb853e06e0a06
              name: '{#CPU_SENSOR}: Sensor Status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.11.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.cpu.[tempHealthStatus.{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the temperature component status.'
              tags:
                - tag: Application
                  value: 'Temperature Sensor Status'
              trigger_prototypes:
                - uuid: f6167bc29ac5448cbb4a84558b9b7b96
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
                  name: '{#CPU_SENSOR}: Temperature Sensor is not in optimal state'
                  priority: HIGH
                  description: 'Sensor problem'
                  dependencies:
                    - name: '{#CPU_SENSOR}: Temperature is above Disaster threshold'
                      expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                      recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
            - uuid: 0d31809326db422db495c7a7fe7e03aa
              name: '{#CPU_SENSOR}: Nominal Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.4.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.cpu.[tempNominalReading.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The nominal temperature, if available.'
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - ''
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 38ba84fe5f794edb94663f77ce69bec5
              name: '{#CPU_SENSOR}: Non-critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.7.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.cpu.[tempNonCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.HIGH.LIMIT.CPU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 8eb3b419600c40b6a5c061a4b28209af
              name: '{#CPU_SENSOR}: Non-critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.10.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.cpu.[tempNonCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value falls below  this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.LOW.LIMIT.CPU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: fac0449125a5424596c1d5b4c650bb38
              name: '{#CPU_SENSOR}: Non-recoverable High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.5.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.cpu.[tempNonRecovLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.HIGH.LIMIT.CPU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: a337f8c9b1ea4906b4ff09aa4cdda5e1
              name: '{#CPU_SENSOR}: Non-recoverable Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.8.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.cpu.[tempNonRecovLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value falls below this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.LOW.LIMIT.CPU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 605135ce8f434e3794bad23bfa364327
              name: '{#CPU_SENSOR}: Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}]'
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The measured temperature CPU'
              tags:
                - tag: Application
                  value: Temperature
          trigger_prototypes:
            - uuid: 9c192654751f40b1860fc7f73efcb5b8
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              name: '{#CPU_SENSOR}: Temperature is above Average threshold'
              priority: AVERAGE
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#CPU_SENSOR}: Temperature is above Critical threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempCritLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempCritLimitLow.{#SNMPINDEX}]))'
            - uuid: bc4fbc0be64b437abad7805bb42c2ea7
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempCritLimitLow.{#SNMPINDEX}]))'
              name: '{#CPU_SENSOR}: Temperature is above Critical threshold'
              priority: HIGH
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#CPU_SENSOR}: Temperature is above Disaster threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                - name: '{#CPU_SENSOR}: Temperature Sensor is not in optimal state'
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
            - uuid: 95f19cbaa4604afaaf64a69f68b45ac5
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.cpu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              name: '{#CPU_SENSOR}: Temperature is above Disaster threshold'
              priority: DISASTER
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
        - uuid: f0a9e0d14df64e029d7e455bdd385fea
          name: 'Temperature Discovery - Other Devices'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#OTHER_SENSOR},1.3.6.1.4.1.19046.11.1.1.1.2.1.2]'
          key: snmp.lenovo.server.temp.other.discovery
          delay: 1h
          filter:
            conditions:
              - macro: '{#OTHER_SENSOR}'
                value: '(DIMM|PSU|PCH|RAID|PCI|CPU|Ambient).*'
                operator: NOT_MATCHES_REGEX
                formulaid: A
          description: 'Discovering the temperature of any other devices'
          item_prototypes:
            - uuid: 52d34a0b15b24a1bb221ca78b38d36c0
              name: '{#OTHER_SENSOR}: Critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.6.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.other.[tempCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.HIGH.LIMIT.OTHER}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: ec2a97fd76c44e309a504d62124aa427
              name: '{#OTHER_SENSOR}: Critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.9.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.other.[tempCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The critical limit for the measured temperature. If the measured value falls below  this limit a trap is sent.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.LOW.LIMIT.OTHER}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 5faa759549924319a5a600f7b859fcab
              name: '{#OTHER_SENSOR}: Sensor Status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.11.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.other.[tempHealthStatus.{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the temperature component status.'
              tags:
                - tag: Application
                  value: 'Temperature Sensor Status'
              trigger_prototypes:
                - uuid: c396be1ec19d4e40b2dc965fe90ed9f9
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.other.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
                  name: '{#OTHER_SENSOR}: Temperature Sensor is not in optimal state'
                  priority: HIGH
                  description: 'Sensor problem'
            - uuid: dd2ca408e8f04c3ab348c1ecd9ff5fc3
              name: '{#OTHER_SENSOR}:  Nominal Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.4.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.other.[tempNominalReading.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The nominal temperature, if available.'
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - ''
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 625d0065ffe44607b4e69af30667cb15
              name: '{#OTHER_SENSOR}: Non-critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.7.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.other.[tempNonCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.HIGH.LIMIT.OTHER}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 798afbbbc0b34389bc0476e2d6260bd3
              name: '{#OTHER_SENSOR}: Non-critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.10.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.other.[tempNonCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value falls below  this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.LOW.LIMIT.OTHER}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 79d76c7e1cc84830a11cf340e73981ee
              name: '{#OTHER_SENSOR}: Non-recoverable High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.5.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.other.[tempNonRecovLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.HIGH.LIMIT.OTHER}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: fbc4766b2b5d4f9e8e995b85b5c66666
              name: '{#OTHER_SENSOR}: Non-recoverable Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.8.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.other.[tempNonRecovLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value falls below this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.LOW.LIMIT.OTHER}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: b5c4cf1c50af4f43b684c7fd50fc6ff7
              name: '{#OTHER_SENSOR}:  Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.other.[tempReading.{#SNMPINDEX}]'
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The measured temperature for other device'
              tags:
                - tag: Application
                  value: Temperature
        - uuid: c0dae686853c4c91b64df26645e96682
          name: 'Temperature Discovery - PCH'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#PCH_SENSOR},1.3.6.1.4.1.19046.11.1.1.1.2.1.2]'
          key: snmp.lenovo.server.temp.pch.discovery
          delay: 1h
          filter:
            conditions:
              - macro: '{#PCH_SENSOR}'
                value: 'PCH.*'
                formulaid: A
          description: 'PCH Temperature Discovery'
          item_prototypes:
            - uuid: 5326f3f459b440128f63d870587021a8
              name: '{#PCH_SENSOR}: Critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.6.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pch.[tempCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.HIGH.LIMIT.PCH}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 58fe0426bc7c49fd815c433ac1580453
              name: '{#PCH_SENSOR}: Critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.9.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pch.[tempCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The critical limit for the measured temperature. If the measured value falls below  this limit a trap is sent.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.LOW.LIMIT.PCH}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 2d419c1fa7f74c6f868148ad6aa68214
              name: '{#PCH_SENSOR}: Sensor Status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.11.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pch.[tempHealthStatus.{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the temperature component status.'
              tags:
                - tag: Application
                  value: 'Temperature Sensor Status'
              trigger_prototypes:
                - uuid: 2351127d766140faa405d55b74071a23
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
                  name: '{#PCH_SENSOR}: Temperature Sensor is not in optimal state'
                  priority: HIGH
                  description: 'Sensor problem'
                  dependencies:
                    - name: '{#PCH_SENSOR}: Temperature is above Disaster threshold'
                      expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                      recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
            - uuid: cda89cfe940744fc9b534847e5fd9977
              name: '{#PCH_SENSOR}: Nominal Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.4.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pch.[tempNominalReading.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The nominal temperature, if available.'
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - ''
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 842cfff721844a23888edd57925fc966
              name: '{#PCH_SENSOR}: Non-critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.7.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pch.[tempNonCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.HIGH.LIMIT.PCH}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 484f8a4aa204479e841e8bbf0bab046e
              name: '{#PCH_SENSOR}: Non-critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.10.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pch.[tempNonCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value falls below  this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.LOW.LIMIT.PCH}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 2bd8d22fe92041ecbb15a8d94a80ba1e
              name: '{#PCH_SENSOR}: Non-recoverable High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.5.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pch.[tempNonRecovLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.HIGH.LIMIT.PCH}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: ba190fc054b14a478a85806a3a54df43
              name: '{#PCH_SENSOR}: Non-recoverable Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.8.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pch.[tempNonRecovLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value falls below this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.LOW.LIMIT.PCH}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 739d87392a8a4e25a09d4b55cba62e40
              name: '{#PCH_SENSOR}: Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}]'
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The measured temperature PCH'
              tags:
                - tag: Application
                  value: 'Temperature Limits'
          trigger_prototypes:
            - uuid: 981fefcd90184a0d88615a3d714e49be
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              name: '{#PCH_SENSOR}: Temperature is above Average threshold'
              priority: AVERAGE
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#PCH_SENSOR}: Temperature is above Critical threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempCritLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempCritLimitLow.{#SNMPINDEX}]))'
            - uuid: 4f6113d318b3413e84f2941b5a189250
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempCritLimitLow.{#SNMPINDEX}]))'
              name: '{#PCH_SENSOR}: Temperature is above Critical threshold'
              priority: HIGH
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#PCH_SENSOR}: Temperature is above Disaster threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                - name: '{#PCH_SENSOR}: Temperature Sensor is not in optimal state'
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
            - uuid: c644410c3b8e462ba4ae66528e70e916
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pch.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              name: '{#PCH_SENSOR}: Temperature is above Disaster threshold'
              priority: DISASTER
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
        - uuid: 19f5a3e710e8419383b13124c7b7bd0c
          name: 'Temperature Discovery - PCI'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#PCI_SENSOR},1.3.6.1.4.1.19046.11.1.1.1.2.1.2]'
          key: snmp.lenovo.server.temp.pci.discovery
          delay: 1h
          filter:
            conditions:
              - macro: '{#PCI_SENSOR}'
                value: 'PCI.*'
                formulaid: A
          description: 'PCI Temperature Discovery'
          item_prototypes:
            - uuid: d8cb528ab97e4f26898868bf9f41492b
              name: '{#PCI_SENSOR}: Critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.6.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pci.[tempCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.HIGH.LIMIT.PCI}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 7b51f3cef85c4e2aa41228c6213972b7
              name: '{#PCI_SENSOR}: Critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.9.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pci.[tempCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The critical limit for the measured temperature. If the measured value falls below  this limit a trap is sent.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.HIGH.LIMIT.PCI}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 05b13c1c8f094a8382fa7f6ce63ae3f1
              name: '{#PCI_SENSOR}: Sensor Status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.11.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pci.[tempHealthStatus.{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the temperature component status.'
              tags:
                - tag: Application
                  value: 'Temperature Sensor Status'
              trigger_prototypes:
                - uuid: 4bd590de243d44dab1416263b630530e
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
                  name: '{#PCI_SENSOR}: Temperature Sensor is not in optimal state'
                  priority: HIGH
                  description: 'Sensor problem'
                  dependencies:
                    - name: '{#PCI_SENSOR}: Temperature is above Disaster threshold'
                      expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                      recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
            - uuid: 98658da19f5c4d0a93d45091910bc11f
              name: '{#PCI_SENSOR}: Nominal Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.4.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pci.[tempNominalReading.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The nominal temperature, if available.'
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - ''
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 95f763deb04a4cb8b20ac141dc0488b0
              name: '{#PCI_SENSOR}: Non-critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.7.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pci.[tempNonCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.HIGH.LIMIT.PCI}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 3e2a96afc8ce4bef92721aa4743a9e20
              name: '{#PCI_SENSOR}: Non-critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.10.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pci.[tempNonCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value falls below  this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.LOW.LIMIT.PCI}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: e06a52c0f5b94569bf0969c570769b70
              name: '{#PCI_SENSOR}: Non-recoverable High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.5.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pci.[tempNonRecovLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.HIGH.LIMIT.PCI}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 0dfa94d6888f4c42bc6bd78dc195ffa2
              name: '{#PCI_SENSOR}: Non-recoverable Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.8.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pci.[tempNonRecovLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value falls below this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.LOW.LIMIT.PCI}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: c3e58484464b4985bf8b8a5baec6f075
              name: '{#PCI_SENSOR}: Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}]'
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The measured temperature PCI device'
              tags:
                - tag: Application
                  value: Temperature
          trigger_prototypes:
            - uuid: ee58d86582fa4f739e657bf499dac82a
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              name: '{#PCI_SENSOR}: Temperature is above Average threshold'
              priority: AVERAGE
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#PCI_SENSOR}: Temperature is above Critical threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempCritLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempCritLimitLow.{#SNMPINDEX}]))'
            - uuid: 0b8f0d63c20f4725910ad0a511d025ec
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempCritLimitLow.{#SNMPINDEX}]))'
              name: '{#PCI_SENSOR}: Temperature is above Critical threshold'
              priority: HIGH
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#PCI_SENSOR}: Temperature is above Disaster threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                - name: '{#PCI_SENSOR}: Temperature Sensor is not in optimal state'
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
            - uuid: 5a79c21de7134f1a9aa0a3254879b933
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.pci.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              name: '{#PCI_SENSOR}: Temperature is above Disaster threshold'
              priority: DISASTER
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
        - uuid: 68d9dee13f854184bd9db4a50ba76b1e
          name: 'Temperature Discovery - PSU'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#PSU_SENSOR},1.3.6.1.4.1.19046.11.1.1.1.2.1.2]'
          key: snmp.lenovo.server.temp.psu.discovery
          delay: 1h
          filter:
            conditions:
              - macro: '{#PSU_SENSOR}'
                value: 'PSU.*'
                formulaid: A
          description: 'PSU temperature discovery'
          item_prototypes:
            - uuid: b908ceb0bd4b470c8d15049cc774e869
              name: '{#PSU_SENSOR}: Critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.6.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.psu.[tempCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.HIGH.LIMIT.PSU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: a4f2c89d077a40c58b44ee7b3480b0b9
              name: '{#PSU_SENSOR}: Critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.9.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.psu.[tempCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The critical limit for the measured temperature. If the measured value falls below  this limit a trap is sent.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.LOW.LIMIT.PSU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: bcea6dd6c8e8498b82b67d4bd294ab58
              name: '{#PSU_SENSOR}: Sensor Status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.11.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.psu.[tempHealthStatus.{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the temperature component status.'
              tags:
                - tag: Application
                  value: 'Temperature Sensor Status'
              trigger_prototypes:
                - uuid: d3b297ff4b8443e2bfa220302ee6dd9a
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
                  name: '{#PSU_SENSOR}: Temperature Sensor is not in optimal state'
                  priority: HIGH
                  description: 'Sensor problem'
                  dependencies:
                    - name: '{#PSU_SENSOR}: Temperature is above Disaster threshold'
                      expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                      recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
            - uuid: 8937dabf68bc4438ae02aa8e9a4c6d17
              name: '{#PSU_SENSOR}: Nominal Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.4.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.psu.[tempNominalReading.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The nominal temperature, if available.'
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - ''
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: d904628f113e427396678d3a3d5ce261
              name: '{#PSU_SENSOR}: Non-critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.7.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.psu.[tempNonCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.HIGH.LIMIT.PSU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: cf72295b70c44cdaa7a1d0dd5ff60db9
              name: '{#PSU_SENSOR}: Non-critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.10.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.psu.[tempNonCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value falls below  this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.LOW.LIMIT.PSU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 49147ce0727f4db7bc45c757459c4597
              name: '{#PSU_SENSOR}: Non-recoverable High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.5.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.psu.[tempNonRecovLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.HIGH.LIMIT.PSU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 74ee8a27f3c94c1087612af9ab9cc951
              name: '{#PSU_SENSOR}: Non-recoverable Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.8.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.psu.[tempNonRecovLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value falls below this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.LOW.LIMIT.PSU}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: e1abc980bcc84a418bcfa918c8d6107f
              name: '{#PSU_SENSOR}: Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}]'
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The measured temperature PSU'
              tags:
                - tag: Application
                  value: Temperature
          trigger_prototypes:
            - uuid: d74092b00c5541bcbb819e3e632a30e8
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              name: '{#PSU_SENSOR}: Temperature is above Average threshold'
              priority: AVERAGE
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#PSU_SENSOR}: Temperature is above Critical threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempCritLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempCritLimitLow.{#SNMPINDEX}]))'
            - uuid: 717dd281182847b0857735bb0148203e
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempCritLimitLow.{#SNMPINDEX}]))'
              name: '{#PSU_SENSOR}: Temperature is above Critical threshold'
              priority: HIGH
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#PSU_SENSOR}: Temperature is above Disaster threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                - name: '{#PSU_SENSOR}: Temperature Sensor is not in optimal state'
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
            - uuid: 6b6be64156814f6bb1347b2fc84da211
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.psu.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              name: '{#PSU_SENSOR}: Temperature is above Disaster threshold'
              priority: DISASTER
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
        - uuid: 3eb98e9e8e8944aab98f21dd5df19c05
          name: 'Temperature Discovery - RAID Controllers'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#RAID_SENSOR},1.3.6.1.4.1.19046.11.1.1.1.2.1.2]'
          key: snmp.lenovo.server.temp.raid.discovery
          delay: 1h
          filter:
            conditions:
              - macro: '{#RAID_SENSOR}'
                value: 'RAID.*'
                formulaid: A
          description: 'Raid controllers temperature discovery'
          item_prototypes:
            - uuid: 1d91679855d0456e9354854c570a4a91
              name: '{#RAID_SENSOR}: Critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.6.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.raid.[tempCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.HIGH.LIMIT.RAID}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: dbce67f96dd64915b03dc348bd749892
              name: '{#RAID_SENSOR}: Critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.9.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.raid.[tempCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The critical limit for the measured temperature. If the measured value falls below  this limit a trap is sent.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.LOW.LIMIT.RAID}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 9ed43443aedc4d0fad9d66c57ff57cba
              name: '{#RAID_SENSOR}: Sensor Status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.11.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.raid.[tempHealthStatus.{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the temperature component status.'
              tags:
                - tag: Application
                  value: 'Temperature Sensor Status'
              trigger_prototypes:
                - uuid: 92e3bba8ebf245a4ae2059f5216471ea
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
                  name: '{#RAID_SENSOR}: Temperature Sensor is not in optimal state'
                  priority: HIGH
                  description: 'Sensor problem'
                  dependencies:
                    - name: '{#RAID_SENSOR}: Temperature is above Disaster threshold'
                      expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                      recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
            - uuid: 7e86a971f69a45ed90646ca598babf34
              name: '{#RAID_SENSOR}: Nominal Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.4.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.raid.[tempNominalReading.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The nominal temperature, if available.'
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - ''
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: d21a5d75143c4c38987be9f617aabb82
              name: '{#RAID_SENSOR}: Non-critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.7.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.raid.[tempNonCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.HIGH.LIMIT.RAID}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: fefddb25a4a64c0296df0247c6ada293
              name: '{#RAID_SENSOR}: Non-critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.10.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.raid.[tempNonCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value falls below  this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.LOW.LIMIT.RAID}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 0999e9259fc6487b994ebd3a6f9eefce
              name: '{#RAID_SENSOR}: Non-recoverable High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.5.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.raid.[tempNonRecovLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.HIGH.LIMIT.RAID}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: dfab9c2f9e754416a1b52efd87c96189
              name: '{#RAID_SENSOR}: Non-recoverable Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.8.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.raid.[tempNonRecovLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value falls below this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.LOW.LIMIT.RAID}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: ddf9c8fc1f9b45cabee494cc8c6f146d
              name: '{#RAID_SENSOR}: Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}]'
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The measured temperature Raid Controller'
              tags:
                - tag: Application
                  value: Temperature
          trigger_prototypes:
            - uuid: a3605022e94f4dbcb7977c207e4c9aa3
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              name: '{#RAID_SENSOR}: Temperature is above Average threshold'
              priority: AVERAGE
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#RAID_SENSOR}: Temperature is above Critical threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempCritLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempCritLimitLow.{#SNMPINDEX}]))'
            - uuid: 731ffb7f9e2f479ebf6bee7a86c463c9
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempCritLimitLow.{#SNMPINDEX}]))'
              name: '{#RAID_SENSOR}: Temperature is above Critical threshold'
              priority: HIGH
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#RAID_SENSOR}: Temperature is above Disaster threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                - name: '{#RAID_SENSOR}: Temperature Sensor is not in optimal state'
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
            - uuid: 54124bdce00348899905465398d3d239
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.raid.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              name: '{#RAID_SENSOR}: Temperature is above Disaster threshold'
              priority: DISASTER
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
        - uuid: 1b9a74d7e2e9428693b2db0ba98b4bda
          name: 'Temperature Discovery - RAM'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#DIMM_SENSOR},1.3.6.1.4.1.19046.11.1.1.1.2.1.2]'
          key: snmp.lenovo.server.temp.ram.discovery
          delay: 1h
          filter:
            conditions:
              - macro: '{#DIMM_SENSOR}'
                value: 'DIMM.*'
                formulaid: A
          description: 'RAM Temperature Discovery'
          item_prototypes:
            - uuid: 01b8d3a1e1254783b846713f67806a28
              name: '{#DIMM_SENSOR}: Critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.6.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ram.[tempCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.HIGH.LIMIT.RAM}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 2aefb44543ae433fb580e9c8512f03f4
              name: '{#DIMM_SENSOR}: Critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.9.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ram.[tempCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The critical limit for the measured temperature. If the measured value falls below  this limit a trap is sent.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.CRIT.LOW.LIMIT.RAM}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: e56541722a3c466a9ea9aaf874b506cf
              name: '{#DIMM_SENSOR}: Sensor Status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.11.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ram.[tempHealthStatus.{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the temperature component status.'
              tags:
                - tag: Application
                  value: 'Temperature Sensor Status'
              trigger_prototypes:
                - uuid: 9c03b67f2206436aa358289382c781c2
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
                  name: '{DIMM_SENSOR}: Temperature Sensor is not in optimal state'
                  priority: HIGH
                  description: 'Sensor problem'
                  dependencies:
                    - name: '{#DIMM_SENSOR}: Temperature is above Disaster threshold'
                      expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                      recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
            - uuid: 7a2154275da0455ebeec006692d8291e
              name: '{#DIMM_SENSOR}: Nominal Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.4.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ram.[tempNominalReading.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The nominal temperature, if available.'
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - ''
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 10bb325ea5fa40369ee6a874006ad0d3
              name: '{#DIMM_SENSOR}: Non-critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.7.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ram.[tempNonCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.HIGH.LIMIT.RAM}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 4d875e156fcf470b80eb6616cedceb43
              name: '{#DIMM_SENSOR}: Non-critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.10.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ram.[tempNonCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-critical limit for the measured temperature. If 
                the measured value falls below  this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONCRIT.LOW.LIMIT.RAM}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 4480b5c6f891451f9015a01f035a08b4
              name: '{#DIMM_SENSOR}: Non-recoverable High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.5.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ram.[tempNonRecovLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.HIGH.LIMIT.RAM}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 845497d466de4a8ea52d623d9c705e56
              name: '{#DIMM_SENSOR}: Non-recoverable Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.8.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ram.[tempNonRecovLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: °C
              description: |
                The non-recoverable limit for the measured temperature. If 
                the measured value falls below this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$TEMP.NONREC.LOW.LIMIT.RAM}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Temperature Limits'
            - uuid: 31403334d0d44936880d8893b86cbdc4
              name: '{#DIMM_SENSOR}: Sensor Temperature'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.1.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}]'
              history: 30d
              value_type: FLOAT
              units: °C
              description: 'The measured temperature DIMM slot'
              tags:
                - tag: Application
                  value: Temperature
          trigger_prototypes:
            - uuid: a7b2fe326ed74a28845b4d28ae6467e0
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonCritLimitLow.{#SNMPINDEX}]))'
              name: '{#DIMM_SENSOR}:  Temperature is above Average threshold'
              priority: AVERAGE
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#DIMM_SENSOR}: Temperature is above Critical threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempCritLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempCritLimitLow.{#SNMPINDEX}]))'
            - uuid: f0b84d5919bf42a4b4e95a0682332e6f
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempCritLimitHigh.{#SNMPINDEX}]))or (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempCritLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempCritLimitHigh.{#SNMPINDEX}]))and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempCritLimitLow.{#SNMPINDEX}]))'
              name: '{#DIMM_SENSOR}: Temperature is above Critical threshold'
              priority: HIGH
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
              dependencies:
                - name: '{#DIMM_SENSOR}: Temperature is above Disaster threshold'
                  expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                  recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
                - name: '{DIMM_SENSOR}: Temperature Sensor is not in optimal state'
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempHealthStatus.{#SNMPINDEX}],#3,"ne","{$TEMP.NORMAL.STATUS}")=1'
            - uuid: f7c51337f9a64bf98ba096817b145a3d
              expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitHigh.{#SNMPINDEX}]))or  (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<=last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: '(avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)<last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitHigh.{#SNMPINDEX}])) and (avg(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempReading.{#SNMPINDEX}],#5)>last(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.temp.ram.[tempNonRecovLimitLow.{#SNMPINDEX}]))'
              name: '{#DIMM_SENSOR}: Temperature is above Disaster threshold'
              priority: DISASTER
              description: |
                Last value: {ITEM1.LASTVALUE1}.
                Threshold value: {ITEM2.LASTVALUE1}
                This trigger uses temperature sensor threshold limit if it's available
        - uuid: c09a88ed54124048b97e2c785a4aadd0
          name: 'Voltage Discovery'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#VOLT_SENSOR},1.3.6.1.4.1.19046.11.1.1.2.2.1.2]'
          key: snmp.lenovo.server.voltage.discovery
          delay: 1h
          description: 'LENOVO-XCC-MIB::voltDescr'
          item_prototypes:
            - uuid: 1a635b23410d4aeda69bcecbef01327a
              name: '{#VOLT_SENSOR}: Sensor Status'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.2.2.1.11.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.voltage.status[{#SNMPINDEX}]'
              history: 30d
              trends: '0'
              value_type: TEXT
              description: 'A description of the voltage component status.'
              tags:
                - tag: Application
                  value: Voltage
              trigger_prototypes:
                - uuid: e962b8d06fca42f1b66aa61f236a82ec
                  expression: 'count(/zbx_lenovo_xcc_snmpv3_test/snmp.lenovo.server.voltage.status[{#SNMPINDEX}],#3,"ne","{$VOLTAGE.NORMAL.STATUS}")=1'
                  name: '{#VOLT_SENSOR}: Sensor is not in normal state'
                  priority: HIGH
                  description: 'Check the sensor please.'
            - uuid: af941515b8b94ad3956df590da283c1c
              name: '{#VOLT_SENSOR}: Critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.2.2.1.6.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.voltage.[voltCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: V
              description: 'The high critical limit for the measured voltage. If the measured value rises above this limit a trap is sent.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$VOLT.CRIT.HIGH.LIMIT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Voltage Limits'
            - uuid: a6cff661dfea470fbc7f82ab7300f47c
              name: '{#VOLT_SENSOR}: Critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.2.2.1.9.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.voltage.[voltCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: V
              description: |
                The low critical limit for the measured voltage. If the 
                measured value falls below this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$VOLT.CRIT.LOW.LIMIT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Voltage Limits'
            - uuid: d57b21d7ee274ad6a8b4f85844d9df74
              name: '{#VOLT_SENSOR}: Nominal Sensor Voltage'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.2.2.1.4.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.voltage.[voltNominalReading.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: V
              description: 'The nominal voltage, if available.'
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - ''
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              tags:
                - tag: Application
                  value: 'Voltage Limits'
            - uuid: 043c5f13477a433bba125030159b8092
              name: '{#VOLT_SENSOR}: Non-critical High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.2.2.1.7.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.voltage.[voltNonCritLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: V
              description: |
                The high non-critical limit for the measured voltage. If the 
                measured value rises above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$VOLT.NONCRIT.HIGH.LIMIT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Voltage Limits'
            - uuid: 15aa37ea08d1446e8ce75f2b6102088a
              name: '{#VOLT_SENSOR}: Non-critical Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.2.2.1.10.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.voltage.[voltNonCritLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: V
              description: |
                The low non-critical limit for the measured voltage. If the 
                measured value falls below this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$VOLT.NONCRIT.LOW.LIMIT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Voltage Limits'
            - uuid: 7f74e554ba38425892476ba8d83db19d
              name: '{#VOLT_SENSOR}: Non-recoverable High Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.2.2.1.5.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.voltage.[voltNonRecovLimitHigh.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: V
              description: |
                The high non-recoverable limit for the measured voltage. If the 
                measured value falls above this limit a trap is sent.
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$VOLT.NONREC.HIGH.LIMIT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Voltage Limits'
            - uuid: c5b98930dac54da790c42c8aeb7d0249
              name: '{#VOLT_SENSOR}: Non-recoverable Low Limit'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.2.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.voltage.[voltNonRecovLimitLow.{#SNMPINDEX}]'
              delay: 2m
              history: 30d
              value_type: FLOAT
              units: V
              description: 'The low non-recoverable limit for the measured voltage. If the measured value falls below this limit a trap is sent.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |2
                          item = value;
                          macro = '{$VOLT.NONREC.LOW.LIMIT}';
                          regex = /\d+/g;
                      
                      if (item.match(regex)) {
                          return(parseFloat(value));
                      }
                      else {
                          return(parseFloat(macro));
                      }
              tags:
                - tag: Application
                  value: 'Voltage Limits'
            - uuid: 5a63a7b2036e402eb1a36d7d27b63803
              name: '{#VOLT_SENSOR}: Sensor Voltage'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.19046.11.1.1.2.2.1.3.{#SNMPINDEX}'
              key: 'snmp.lenovo.server.voltage.[voltReading.{#SNMPINDEX}]'
              history: 30d
              value_type: FLOAT
              units: V
              description: 'The measured voltage.'
              preprocessing:
                - type: RTRIM
                  parameters:
                    - '".*'
                - type: LTRIM
                  parameters:
                    - '.*"'
              tags:
                - tag: Application
                  value: Voltage
      macros:
        - macro: '{$DISK.NORMAL.STATUS}'
          value: Normal
          description: '"Good" physical disk status'
        - macro: '{$FAN.HIGH.SPEED}'
          value: '90'
          description: 'Threshold for high speed of a fan (in %)'
        - macro: '{$FAN.MEDIUM.SPEED}'
          value: '75'
          description: 'Threshold for medium speed of fan (in %)'
        - macro: '{$FAN.NORMAL.STATUS}'
          value: Normal
          description: '"Good" Fan health status'
        - macro: '{$ICMP_LOSS_WARN}'
          value: '20'
        - macro: '{$ICMP_RESPONSE_TIME_WARN}'
          value: '0.15'
        - macro: '{$PSU.NORMAL.STATUS}'
          value: Normal
          description: '"Good" PSU health status'
        - macro: '{$SNMP.NO.DATA.INTERVAL}'
          value: 5m
          description: 'The time interval for SNMP agent availability trigger expression.'
        - macro: '{$TEMP.CRIT.HIGH.LIMIT.AMBIENT}'
          value: '47'
          description: 'Critical high temperature threshold for Ambient Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.HIGH.LIMIT.CPU}'
          value: '67'
          description: 'Critical high temperature threshold for CPU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.HIGH.LIMIT.OTHER}'
          value: '55'
          description: 'Critical high temperature threshold for Other Devices Sensors in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.HIGH.LIMIT.PCH}'
          value: '52'
          description: 'Critical high temperature threshold for PCH Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.HIGH.LIMIT.PCI}'
          value: '55'
          description: 'Critical high temperature threshold for PCI Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.HIGH.LIMIT.PSU}'
          value: '65'
          description: 'Critical high temperature threshold for PSU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.HIGH.LIMIT.RAID}'
          value: '60'
          description: 'Critical high temperature threshold for RAID Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.HIGH.LIMIT.RAM}'
          value: '50'
          description: 'Critical high temperature threshold for RAM Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.LOW.LIMIT.AMBIENT}'
          value: '5'
          description: 'Critical Low temperature threshold for Ambient Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.LOW.LIMIT.CPU}'
          value: '5'
          description: 'Critical Low temperature threshold for CPU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.LOW.LIMIT.OTHER}'
          value: '5'
          description: 'Critical Low temperature threshold for Other Devices Sensors in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.LOW.LIMIT.PCH}'
          value: '8'
          description: 'Critical Low temperature threshold for PCH Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.LOW.LIMIT.PCI}'
          value: '7'
          description: 'Critical Low temperature threshold for PCI Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.LOW.LIMIT.PSU}'
          value: '5'
          description: 'Critical Low temperature threshold for PSU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.LOW.LIMIT.RAID}'
          value: '7'
          description: 'Critical Low temperature threshold for RAID Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.CRIT.LOW.LIMIT.RAM}'
          value: '5'
          description: 'Critical Low temperature threshold for RAM Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.HIGH.LIMIT.AMBIENT}'
          value: '43'
          description: 'Non-critical High temperature threshold for Ambient Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.HIGH.LIMIT.CPU}'
          value: '60'
          description: 'Non-critical High temperature threshold for CPU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.HIGH.LIMIT.OTHER}'
          value: '50'
          description: 'Non-critical High temperature threshold for Other Devices Sensors in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.HIGH.LIMIT.PCH}'
          value: '48'
          description: 'Non-critical High temperature threshold for PCH Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.HIGH.LIMIT.PCI}'
          value: '50'
          description: 'Non-critical High temperature threshold for PCI Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.HIGH.LIMIT.PSU}'
          value: '60'
          description: 'Non-critical High temperature threshold for PSU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.HIGH.LIMIT.RAID}'
          value: '55'
          description: 'Non-critical High temperature threshold for RAID Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.HIGH.LIMIT.RAM}'
          value: '45'
          description: 'Non-critical High temperature threshold for RAM Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.LOW.LIMIT.AMBIENT}'
          value: '10'
          description: 'Non-critical Low temperature threshold for Ambient Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.LOW.LIMIT.CPU}'
          value: '10'
          description: 'Non-critical Low temperature threshold for CPU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.LOW.LIMIT.OTHER}'
          value: '10'
          description: 'Non-critical Low temperature threshold for Other Devices Sensors in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.LOW.LIMIT.PCH}'
          value: '12'
          description: 'Non-critical Low temperature threshold for PCH Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.LOW.LIMIT.PCI}'
          value: '10'
          description: 'Non-critical Low temperature threshold for PCI Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.LOW.LIMIT.PSU}'
          value: '10'
          description: 'Non-critical Low temperature threshold for PSU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.LOW.LIMIT.RAID}'
          value: '12'
          description: 'Non-critical Low temperature threshold for RAID Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONCRIT.LOW.LIMIT.RAM}'
          value: '12'
          description: 'Non-critical Low temperature threshold for RAM Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.HIGH.LIMIT.AMBIENT}'
          value: '50'
          description: 'Non-recoverable high temperature threshold for Ambient Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.HIGH.LIMIT.CPU}'
          value: '70'
          description: 'Non-recoverable high temperature threshold for CPU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.HIGH.LIMIT.OTHER}'
          value: '60'
          description: 'Non-recoverable high temperature threshold for Other Devices Sensors in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.HIGH.LIMIT.PCH}'
          value: '58'
          description: 'Non-recoverable high temperature threshold for PCH Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.HIGH.LIMIT.PCI}'
          value: '60'
          description: 'Non-recoverable high temperature threshold for PCI Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.HIGH.LIMIT.PSU}'
          value: '70'
          description: 'Non-recoverable high temperature threshold for PSU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.HIGH.LIMIT.RAID}'
          value: '65'
          description: 'Non-recoverable high temperature threshold for RAID Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.HIGH.LIMIT.RAM}'
          value: '55'
          description: 'Non-recoverable high temperature threshold for RAM Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.LOW.LIMIT.AMBIENT}'
          value: '0'
          description: 'Non-recoverable low temperature threshold for Ambient Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.LOW.LIMIT.CPU}'
          value: '0'
          description: 'Non-recoverable low temperature threshold for CPU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.LOW.LIMIT.OTHER}'
          value: '0'
          description: 'Non-recoverable low temperature threshold for Other Devices Sensors in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.LOW.LIMIT.PCH}'
          value: '0'
          description: 'Non-recoverable low temperature threshold for PCH Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.LOW.LIMIT.PCI}'
          value: '0'
          description: 'Non-recoverable low temperature threshold for PCI Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.LOW.LIMIT.PSU}'
          value: '0'
          description: 'Non-recoverable low temperature threshold for PSU Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.LOW.LIMIT.RAID}'
          value: '0'
          description: 'Non-recoverable low temperature threshold for RAID Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NONREC.LOW.LIMIT.RAM}'
          value: '0'
          description: 'Non-recoverable low temperature threshold for RAM Sensor in celcius. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$TEMP.NORMAL.STATUS}'
          value: Normal
          description: '"Good" Temperature Sensor health status'
        - macro: '{$VOLT.CRIT.HIGH.LIMIT}'
          value: '13'
          description: 'Critical high voltage threshold for Voltage Sensors (in Volts). It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$VOLT.CRIT.LOW.LIMIT}'
          value: '2.5'
          description: 'Critical low voltage threshold for Voltage Sensors (in Volts). It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$VOLT.NONCRIT.HIGH.LIMIT}'
          value: '5'
          description: 'Non-critical High voltage threshold for Voltage Sensors (in Volts).. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$VOLT.NONCRIT.LOW.LIMIT}'
          value: '1'
          description: 'Non-critical Low voltage threshold for Voltage Sensors (in Volts).. It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$VOLT.NONREC.HIGH.LIMIT}'
          value: '14'
          description: 'Non-recoverable high voltage threshold for Voltage Sensors (in Volts). It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$VOLT.NONREC.LOW.LIMIT}'
          value: '0'
          description: 'Non-recoverable low voltage threshold for Voltage Sensors (in Volts). It''s used when the original threshold value is "N/A" or cannot be obtain (change it accordingly)'
        - macro: '{$VOLTAGE.NORMAL.STATUS}'
          value: Normal
          description: '"Good" Voltage Sensor health status'
      valuemaps:
        - uuid: 626bd693a56249ef82f201314b323fa6
          name: 'Operational State of the System'
          mappings:
            - value: '0'
              newvalue: SystemPowerOfforStateUnknown
            - value: '1'
              newvalue: SystemPowerOnorStartingUEFI
            - value: '2'
              newvalue: SystemInUEFI
            - value: '3'
              newvalue: UEFIErrorDetected
            - value: '4'
              newvalue: BootingOSorInUnsupportedOS
            - value: '5'
              newvalue: OSBooted
            - value: '6'
              newvalue: SuspendToRAM
            - value: '7'
              newvalue: SystemInSetup
            - value: '8'
              newvalue: SystemInLXPMMaintenanceMode
            - value: '9'
              newvalue: SystemInMemoryTest
        - uuid: dddbb8d2e83040bebe899e44240ba42b
          name: 'Services Status'
          mappings:
            - value: '0'
              newvalue: Disabled
            - value: '1'
              newvalue: Enabled
        - uuid: 66b4ea2e68a84d67909353dd8cb56790
          name: 'SNMP host available'
          mappings:
            - value: '0'
              newvalue: 'not available'
            - value: '1'
              newvalue: available
            - value: '2'
              newvalue: unknown
        - uuid: 70c48012ebee41ba8ab548d659a02c87
          name: 'System Power Status'
          mappings:
            - value: '0'
              newvalue: PoweredOff
            - value: '1'
              newvalue: SleepS3
            - value: '255'
              newvalue: Normal
