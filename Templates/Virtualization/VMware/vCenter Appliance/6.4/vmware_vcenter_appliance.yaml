zabbix_export:
  version: '6.4'
  template_groups:
    - uuid: 02e4df4f20b848e79267641790f241da
      name: Templates/Virtualization
  templates:
    - uuid: da2c77bf57e84c24aec7f5d82ad20b7b
      template: vmware_vcenter_appliance
      name: vmware_vcenter_appliance
      description: |
        # Written by Rayg00nchik
        # Monitoring vCenter Appliance (7.0+)
        # Pre-requirenments:
        # - Create a new role in vCenter and new group or user (optionaly)
        # - Assign read priviliegs to the role (optionaly)
        # - Assign read permisiions to the new group  (vStat, read only etc.)
        # - In vCenter "Administration" -> "single sign-on" -> "user and groups" click on  "groups" and find "SystemConfiguration.ReadOnly" group. Add the previously created group there.
        # - Check the Template Macroses before using!
      groups:
        - name: Templates/Virtualization
      items:
        - uuid: 4ff42b50c6584651afecf6c9723f2cd4
          name: 'vCenter Appliance Database Storage Status'
          type: SCRIPT
          key: vcenter.appliance.database.storage.status
          history: 30d
          trends: '0'
          value_type: TEXT
          params: |
            // Parsing incoming parameters;
            parameters = JSON.parse(value);
            
            // Coding username + pass to base64
            auth_key = btoa(parameters.username + ":" + parameters.password);
            
            // Getting auth token 
            req = new HttpRequest();
            req.addHeader('Authorization: Basic '+auth_key);
            resp = req.post(parameters.vcenter_url_session);
            session_id = resp.match(/(?:[a-zA-Z0-9]{32})/g);
            
            // Getting database storage status
            req_vcenter_database_storage_status = new HttpRequest();
            req_vcenter_database_storage_status.addHeader('vmware-api-session-id: '+session_id);
            req_vcenter_database_storage_status = req_vcenter_database_storage_status.get(parameters.vcenter_database_health_url);
            
            //Parsing result
            json_data = JSON.parse(req_vcenter_database_storage_status);
            
            // Deleting current session - logout
            req_logout_session = new HttpRequest();
            req_logout_session.addHeader('vmware-api-session-id: '+session_id);
            req_logout_session = req_logout_session.delete(parameters.vcenter_url_session);
            
            
            // Returning the value, not an object
            return(json_data.value);
          description: 'Getting appliance database storage status'
          parameters:
            - name: password
              value: '{$VMWARE.PASSWORD}'
            - name: username
              value: '{$VMWARE.USERNAME}'
            - name: vcenter_database_health_url
              value: '{$VMWARE.APP.DATABASE.STATUS.URL}'
            - name: vcenter_url_session
              value: '{$VCENTER_URL_SESSION}'
          triggers:
            - uuid: b05a416d550a49e4bf1bf7315fffabbd
              expression: 'find(/vmware_vcenter_appliance/vcenter.appliance.database.storage.status,#3,"eq","green")=0'
              name: 'vCenter Appliance Database Storage is not Healthy'
              priority: HIGH
              description: 'Check the vCenter Appliance please'
              manual_close: 'YES'
              dependencies:
                - name: 'Unable connect to vCenter Appliance'
                  expression: 'nodata(/vmware_vcenter_appliance/vcenter.appliance.system.status,5)=1'
        - uuid: 26e71897f8e042d3bedf130a392c8075
          name: 'vCenter Appliance Load Status'
          type: SCRIPT
          key: vcenter.appliance.load.status
          history: 30d
          trends: '0'
          value_type: TEXT
          params: |
            // Parsing incoming parameters;
            parameters = JSON.parse(value);
            
            // Coding username + pass to base64
            auth_key = btoa(parameters.username + ":" + parameters.password);
            
            // Getting auth token 
            req = new HttpRequest();
            req.addHeader('Authorization: Basic '+auth_key);
            resp = req.post(parameters.vcenter_url_session);
            session_id = resp.match(/(?:[a-zA-Z0-9]{32})/g);
            
            // Getting load status
            req_vcenter_load_status = new HttpRequest();
            req_vcenter_load_status.addHeader('vmware-api-session-id: '+session_id);
            req_vcenter_load_status = req_vcenter_load_status.get(parameters.vcenter_load_health_url);
            
            //Parsing result
            json_data = JSON.parse(req_vcenter_load_status);
            
            // Deleting current session - logout
            req_logout_session = new HttpRequest();
            req_logout_session.addHeader('vmware-api-session-id: '+session_id);
            req_logout_session = req_logout_session.delete(parameters.vcenter_url_session);
            
            
            // Returning the value, not an object
            return(json_data.value);
          description: 'Getting appliance load status'
          parameters:
            - name: password
              value: '{$VMWARE.PASSWORD}'
            - name: username
              value: '{$VMWARE.USERNAME}'
            - name: vcenter_load_health_url
              value: '{$VMWARE.APP.LOAD.STATUS.URL}'
            - name: vcenter_url_session
              value: '{$VCENTER_URL_SESSION}'
          triggers:
            - uuid: 12cddc2d2f4e46a38abda2d4d1be1fb9
              expression: 'find(/vmware_vcenter_appliance/vcenter.appliance.load.status,#3,"eq","green")=0'
              name: 'vCenter Appliance Load is not Healthy'
              priority: HIGH
              description: 'Check the vCenter Appliance please'
              manual_close: 'YES'
              dependencies:
                - name: 'Unable connect to vCenter Appliance'
                  expression: 'nodata(/vmware_vcenter_appliance/vcenter.appliance.system.status,5)=1'
        - uuid: 9b1b383e7ed24f468ce3de12e504997e
          name: 'vCenter Appliance Memory Status'
          type: SCRIPT
          key: vcenter.appliance.memory.status
          history: 30d
          trends: '0'
          value_type: TEXT
          params: |
            // Parsing incoming parameters;
            parameters = JSON.parse(value);
            
            // Coding username + pass to base64
            auth_key = btoa(parameters.username + ":" + parameters.password);
            
            // Getting auth token 
            req = new HttpRequest();
            req.addHeader('Authorization: Basic '+auth_key);
            resp = req.post(parameters.vcenter_url_session);
            session_id = resp.match(/(?:[a-zA-Z0-9]{32})/g);
            
            // Getting load status
            req_vcenter_memory_status = new HttpRequest();
            req_vcenter_memory_status.addHeader('vmware-api-session-id: '+session_id);
            req_vcenter_memory_status = req_vcenter_memory_status.get(parameters.vcenter_memory_health_url);
            
            //Parsing result
            json_data = JSON.parse(req_vcenter_memory_status);
            
            // Deleting current session - logout
            req_logout_session = new HttpRequest();
            req_logout_session.addHeader('vmware-api-session-id: '+session_id);
            req_logout_session = req_logout_session.delete(parameters.vcenter_url_session);
            
            
            // Returning the value, not an object
            return(json_data.value);
          description: 'Getting appliance memory health status'
          parameters:
            - name: password
              value: '{$VMWARE.PASSWORD}'
            - name: username
              value: '{$VMWARE.USERNAME}'
            - name: vcenter_memory_health_url
              value: '{$VMWARE.APP.MEMORY.STATUS.URL}'
            - name: vcenter_url_session
              value: '{$VCENTER_URL_SESSION}'
          triggers:
            - uuid: 82d5c3201fc94b47bc94ec9786f8961b
              expression: 'find(/vmware_vcenter_appliance/vcenter.appliance.memory.status,#3,"eq","green")=0'
              name: 'vCenter Appliance Memory Status is not Healthy'
              priority: HIGH
              description: 'Check the vCenter Appliance please'
              manual_close: 'YES'
              dependencies:
                - name: 'Unable connect to vCenter Appliance'
                  expression: 'nodata(/vmware_vcenter_appliance/vcenter.appliance.system.status,5)=1'
        - uuid: 7d5cdff45d2241fe8da2b5591402d75c
          name: 'vCenter Appliance Services Status'
          type: SCRIPT
          key: vcenter.appliance.services.status
          history: 30d
          trends: '0'
          value_type: TEXT
          params: |
            // Parsing incoming parameters;
            parameters = JSON.parse(value);
            
            // Coding username + pass to base64
            auth_key = btoa(parameters.username + ":" + parameters.password);
            
            // Getting auth token 
            req = new HttpRequest();
            req.addHeader('Authorization: Basic '+auth_key);
            resp = req.post(parameters.vcenter_url_session);
            session_id = resp.match(/(?:[a-zA-Z0-9]{32})/g);
            
            // Getting status of appliance services
            req_vcenter_appliance_services_status = new HttpRequest();
            req_vcenter_appliance_services_status.addHeader('vmware-api-session-id: '+session_id);
            req_vcenter_appliance_services_status = req_vcenter_appliance_services_status.get(parameters.vcenter_appliance_health_url);
            
            //Parsing result
            json_data = JSON.parse(req_vcenter_appliance_services_status);
            
            // Deleting current session - logout
            req_logout_session = new HttpRequest();
            req_logout_session.addHeader('vmware-api-session-id: '+session_id);
            req_logout_session = req_logout_session.delete(parameters.vcenter_url_session);
            
            
            // Returning the raw value, not an object
            return(json_data.value);
          description: 'Getting appliance services status'
          parameters:
            - name: username
              value: '{$VMWARE.USERNAME}'
            - name: password
              value: '{$VMWARE.PASSWORD}'
            - name: vcenter_url_session
              value: '{$VCENTER_URL_SESSION}'
            - name: vcenter_appliance_health_url
              value: '{$VMWARE.APP.HEALTH.SERVICES.URL}'
          triggers:
            - uuid: c675b98425ce4e0eaae2ccca8816b8fc
              expression: 'find(/vmware_vcenter_appliance/vcenter.appliance.services.status,#3,"eq","green")=0'
              name: 'vCenter Appliance Services Status is not Healthy'
              priority: HIGH
              description: 'Check the vCenter Appliance please'
              manual_close: 'YES'
              dependencies:
                - name: 'Unable connect to vCenter Appliance'
                  expression: 'nodata(/vmware_vcenter_appliance/vcenter.appliance.system.status,5)=1'
        - uuid: ac35ba0d69e14c19b6ed88850041b6b8
          name: 'vCenter Appliance Software Packages Updates Status'
          type: SCRIPT
          key: vcenter.appliance.software.packages.updates.status
          history: 30d
          trends: '0'
          value_type: TEXT
          params: |
            // Parsing incoming parameters;
            parameters = JSON.parse(value);
            
            // Coding username + pass to base64
            auth_key = btoa(parameters.username + ":" + parameters.password);
            
            // Getting auth token 
            req = new HttpRequest();
            req.addHeader('Authorization: Basic '+auth_key);
            resp = req.post(parameters.vcenter_url_session);
            session_id = resp.match(/(?:[a-zA-Z0-9]{32})/g);
            
            // Getting software packages updates status
            req_vcenter_software_status = new HttpRequest();
            req_vcenter_software_status.addHeader('vmware-api-session-id: '+session_id);
            req_vcenter_software_status = req_vcenter_software_status.get(parameters.vcenter_software_health_url);
            
            //Parsing result
            json_data = JSON.parse(req_vcenter_software_status);
            
            // Deleting current session - logout
            req_logout_session = new HttpRequest();
            req_logout_session.addHeader('vmware-api-session-id: '+session_id);
            req_logout_session = req_logout_session.delete(parameters.vcenter_url_session);
            
            
            // Returning the value, not an object
            return(json_data.value);
          description: 'Getting appliance software packages updates health status'
          parameters:
            - name: password
              value: '{$VMWARE.PASSWORD}'
            - name: username
              value: '{$VMWARE.USERNAME}'
            - name: vcenter_software_health_url
              value: '{$VMWARE.APP.SOFTWARE.STATUS.URL}'
            - name: vcenter_url_session
              value: '{$VCENTER_URL_SESSION}'
          triggers:
            - uuid: 01270be8da8341f6b5694ac71fe4c7b2
              expression: 'find(/vmware_vcenter_appliance/vcenter.appliance.software.packages.updates.status,#3,"eq","green")=0'
              name: 'vCenter Appliance Software Packages Updates Status is not Healthy'
              priority: HIGH
              description: 'Check the vCenter Appliance please'
              manual_close: 'YES'
              dependencies:
                - name: 'Unable connect to vCenter Appliance'
                  expression: 'nodata(/vmware_vcenter_appliance/vcenter.appliance.system.status,5)=1'
        - uuid: 1bb27d4a74a14c87ab2859f70c5a4181
          name: 'vCenter Appliance Storage Status'
          type: SCRIPT
          key: vcenter.appliance.storage.status
          history: 30d
          trends: '0'
          value_type: TEXT
          params: |
            // Parsing incoming parameters;
            parameters = JSON.parse(value);
            
            // Coding username + pass to base64
            auth_key = btoa(parameters.username + ":" + parameters.password);
            
            // Getting auth token 
            req = new HttpRequest();
            req.addHeader('Authorization: Basic '+auth_key);
            resp = req.post(parameters.vcenter_url_session);
            session_id = resp.match(/(?:[a-zA-Z0-9]{32})/g);
            
            // Getting storage status
            req_vcenter_storage_status = new HttpRequest();
            req_vcenter_storage_status.addHeader('vmware-api-session-id: '+session_id);
            req_vcenter_storage_status = req_vcenter_storage_status.get(parameters.vcenter_storage_health_url);
            
            //Parsing result
            json_data = JSON.parse(req_vcenter_storage_status);
            
            // Deleting current session - logout
            req_logout_session = new HttpRequest();
            req_logout_session.addHeader('vmware-api-session-id: '+session_id);
            req_logout_session = req_logout_session.delete(parameters.vcenter_url_session);
            
            
            // Returning the value, not an object
            return(json_data.value);
          description: 'Getting appliance storage health status'
          parameters:
            - name: password
              value: '{$VMWARE.PASSWORD}'
            - name: username
              value: '{$VMWARE.USERNAME}'
            - name: vcenter_storage_health_url
              value: '{$VMWARE.APP.STORAGE.STATUS.URL}'
            - name: vcenter_url_session
              value: '{$VCENTER_URL_SESSION}'
          triggers:
            - uuid: 42915cc2695448e2903d1887e6462175
              expression: 'find(/vmware_vcenter_appliance/vcenter.appliance.storage.status,#3,"eq","green")=0'
              name: 'vCenter Appliance Storage Status is not Healthy'
              priority: HIGH
              description: 'Check the vCenter Appliance please'
              manual_close: 'YES'
              dependencies:
                - name: 'Unable connect to vCenter Appliance'
                  expression: 'nodata(/vmware_vcenter_appliance/vcenter.appliance.system.status,5)=1'
        - uuid: fbfa698b72b944a698064dc86a058cbe
          name: 'vCenter Appliance Swap Status'
          type: SCRIPT
          key: vcenter.appliance.swap.status
          history: 30d
          trends: '0'
          value_type: TEXT
          params: |
            // Parsing incoming parameters;
            parameters = JSON.parse(value);
            
            // Coding username + pass to base64
            auth_key = btoa(parameters.username + ":" + parameters.password);
            
            // Getting auth token 
            req = new HttpRequest();
            req.addHeader('Authorization: Basic '+auth_key);
            resp = req.post(parameters.vcenter_url_session);
            session_id = resp.match(/(?:[a-zA-Z0-9]{32})/g);
            
            // Getting swap status
            req_vcenter_swap_status = new HttpRequest();
            req_vcenter_swap_status.addHeader('vmware-api-session-id: '+session_id);
            req_vcenter_swap_status = req_vcenter_swap_status.get(parameters.vcenter_swap_health_url);
            
            //Parsing result
            json_data = JSON.parse(req_vcenter_swap_status);
            
            // Deleting current session - logout
            req_logout_session = new HttpRequest();
            req_logout_session.addHeader('vmware-api-session-id: '+session_id);
            req_logout_session = req_logout_session.delete(parameters.vcenter_url_session);
            
            
            // Returning the value, not an object
            return(json_data.value);
          description: 'Getting appliance swap health status'
          parameters:
            - name: password
              value: '{$VMWARE.PASSWORD}'
            - name: username
              value: '{$VMWARE.USERNAME}'
            - name: vcenter_swap_health_url
              value: '{$VMWARE.APP.SWAP.STATUS.URL}'
            - name: vcenter_url_session
              value: '{$VCENTER_URL_SESSION}'
          triggers:
            - uuid: 55005c13ca3a4838a200f731c949704f
              expression: 'find(/vmware_vcenter_appliance/vcenter.appliance.swap.status,#3,"eq","green")=0'
              name: 'vCenter Appliance Swap Status is not Healthy'
              priority: HIGH
              description: 'Check the vCenter Appliance please'
              manual_close: 'YES'
              dependencies:
                - name: 'Unable connect to vCenter Appliance'
                  expression: 'nodata(/vmware_vcenter_appliance/vcenter.appliance.system.status,5)=1'
        - uuid: 0e782de457964e85b25667fa0e2438a1
          name: 'vCenter Appliance System Last Check'
          type: SCRIPT
          key: vcenter.appliance.system.last.check
          history: 30d
          trends: '0'
          value_type: TEXT
          params: |
            // Parsing incoming parameters;
            parameters = JSON.parse(value);
            
            // Coding username + pass to base64
            auth_key = btoa(parameters.username + ":" + parameters.password);
            
            // Getting auth token 
            req = new HttpRequest();
            req.addHeader('Authorization: Basic '+auth_key);
            resp = req.post(parameters.vcenter_url_session);
            session_id = resp.match(/(?:[a-zA-Z0-9]{32})/g);
            
            // Getting system last check time
            req_vcenter_system_lastcheck_time = new HttpRequest();
            req_vcenter_system_lastcheck_time.addHeader('vmware-api-session-id: '+session_id);
            req_vcenter_system_lastcheck_time = req_vcenter_system_lastcheck_time.get(parameters.vcenter_system_lastcheck_url);
            
            //Parsing result
            json_data = JSON.parse(req_vcenter_system_lastcheck_time);
            
            // Deleting current session - logout
            req_logout_session = new HttpRequest();
            req_logout_session.addHeader('vmware-api-session-id: '+session_id);
            req_logout_session = req_logout_session.delete(parameters.vcenter_url_session);
            
            
            // Returning the value, not an object
            return(json_data.value);
          description: 'Getting appliance system last check'
          parameters:
            - name: password
              value: '{$VMWARE.PASSWORD}'
            - name: username
              value: '{$VMWARE.USERNAME}'
            - name: vcenter_system_lastcheck_url
              value: '{$VMWARE.APP.SYSTEM.LASTCHECK.STATUS.URL}'
            - name: vcenter_url_session
              value: '{$VCENTER_URL_SESSION}'
        - uuid: 55a93866f81b488da932744e5d5c0a8d
          name: 'vCenter Appliance System Status'
          type: SCRIPT
          key: vcenter.appliance.system.status
          history: 30d
          trends: '0'
          value_type: TEXT
          params: |
            // Parsing incoming parameters;
            parameters = JSON.parse(value);
            
            // Coding username + pass to base64
            auth_key = btoa(parameters.username + ":" + parameters.password);
            
            // Getting auth token 
            req = new HttpRequest();
            req.addHeader('Authorization: Basic '+auth_key);
            resp = req.post(parameters.vcenter_url_session);
            session_id = resp.match(/(?:[a-zA-Z0-9]{32})/g);
            
            // Getting system status
            req_vcenter_system_status = new HttpRequest();
            req_vcenter_system_status.addHeader('vmware-api-session-id: '+session_id);
            req_vcenter_system_status = req_vcenter_system_status.get(parameters.vcenter_system_health_url);
            
            //Parsing result
            json_data = JSON.parse(req_vcenter_system_status);
            
            // Deleting current session - logout
            req_logout_session = new HttpRequest();
            req_logout_session.addHeader('vmware-api-session-id: '+session_id);
            req_logout_session = req_logout_session.delete(parameters.vcenter_url_session);
            
            
            // Returning the value, not an object
            return(json_data.value);
          description: 'Getting appliance system health status'
          parameters:
            - name: password
              value: '{$VMWARE.PASSWORD}'
            - name: username
              value: '{$VMWARE.USERNAME}'
            - name: vcenter_system_health_url
              value: '{$VMWARE.APP.SYSTEM.STATUS.URL}'
            - name: vcenter_url_session
              value: '{$VCENTER_URL_SESSION}'
          triggers:
            - uuid: 995f8619fd804d04a58258f6fe0ee01d
              expression: 'nodata(/vmware_vcenter_appliance/vcenter.appliance.system.status,5)=1'
              name: 'Unable connect to vCenter Appliance'
              priority: DISASTER
              description: 'Check the connection to vCenter Appliance please!'
              manual_close: 'YES'
      macros:
        - macro: '{$VCENTER_URL_SESSION}'
          value: 'https://<vcenter_fqdn>/rest/com/vmware/cis/session'
          description: 'vCenter Url to obtain authentification token (value)'
        - macro: '{$VMWARE.APP.DATABASE.STATUS.URL}'
          value: 'https://<vcenter_fqdn>/rest/appliance/health/database-storage'
          description: 'vCenter Appliance database storage status url'
        - macro: '{$VMWARE.APP.HEALTH.SERVICES.URL}'
          value: 'https://<vcenter_fqdn>/rest/appliance/health/applmgmt'
          description: 'vCenter Appliance services status url (health)'
        - macro: '{$VMWARE.APP.LOAD.STATUS.URL}'
          value: 'https://<vcenter_fqdn>/rest/appliance/health/load'
          description: 'vCenter Appliance load status url'
        - macro: '{$VMWARE.APP.MEMORY.STATUS.URL}'
          value: 'https://<vcenter_fqdn>/rest/appliance/health/mem'
          description: 'vCenter Appliance memory status url'
        - macro: '{$VMWARE.APP.SOFTWARE.STATUS.URL}'
          value: 'https://<vcenter_fqdn>/rest/appliance/health/software-packages'
          description: 'vCenter Appliance software status url'
        - macro: '{$VMWARE.APP.STORAGE.STATUS.URL}'
          value: 'https://<vcenter_fqdn>/rest/appliance/health/storage'
          description: 'vCenter Appliance storage status url'
        - macro: '{$VMWARE.APP.SWAP.STATUS.URL}'
          value: 'https://<vcenter_fqdn>/rest/appliance/health/swap'
          description: 'vCenter Appliance swap status url'
        - macro: '{$VMWARE.APP.SYSTEM.LASTCHECK.STATUS.URL}'
          value: 'https://<vcenter_fqdn>/rest/appliance/health/system/lastcheck'
          description: 'vCenter Appliance system last check url'
        - macro: '{$VMWARE.APP.SYSTEM.STATUS.URL}'
          value: 'https://<vcenter_fqdn>/rest/appliance/health/system'
          description: 'vCenter Appliance system status url'
        - macro: '{$VMWARE.PASSWORD}'
          value: <password>
          description: 'VMware service {$USERNAME} user password'
        - macro: '{$VMWARE.URL}'
          value: 'https://<vcenter_fqdn>/sdk'
          description: 'VMware service - vCenter SDK URL (https://<vcenter_fqdn>/sdk)'
        - macro: '{$VMWARE.USERNAME}'
          value: <username>
          description: 'VMware service user name'
